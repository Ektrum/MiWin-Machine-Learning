# -*- coding: utf-8 -*-
"""
Created on Tue Apr 25 15:05:38 2017

@author: LeticiaValle_Mac
"""
from sharc.propagation.propagation import Propagation

import numpy as np

class PropagationGasesAttenuation(Propagation):
    """
    Basic transmission loss due to free-space propagation and attenuation by atmospheric gases
    """

    def get_loss(self, *args, **kwargs) -> np.array:

        d = np.asarray(kwargs["distance"]) #Km
        f = np.asarray(kwargs["frequency"]) #GHz

        Ph = np.asarray(kwargs["atmospheric_pressure"])
        T = np.asarray(kwargs["air_temperature"])
        ro = np.asarray(kwargs["water_vapour"])

        P=Ph
        theta=300/T
        e=ro*T/216.7
        p=P-e

        fo,a1,a2,a3,a4,a5,a6 = self.get_data_oxygen()
        fwv,b1,b2,b3,b4,b5,b6 = self.get_data_water_vapour()

        #Line strength Si
        Sio = np.array(a1)*(1e-7)*p*(theta**3.0)*np.exp(np.array(a2)*(1-theta))
        Siw = np.array(b1)*(1e-1)*e*(theta**3.5)*np.exp(np.array(b2)*(1-theta))

        #Line shape factor
        deltao = (np.array(a5)+np.array(a6)*theta)*(1e-4)*(p+e)*theta**(0.8)
        deltaw=0;

        deltafo=np.array(a3)*(1e-4)*(p*theta**(0.8-np.array(a4))+1.1*e*theta)
        deltafw=np.array(b3)*(1e-4)*(p*theta**np.array(b4)+np.array(b5)*e*theta**np.array(b6))

        part1Fio=(deltafo-deltao*(fo-f))/((fo-f)**2+deltafo**2)
        part2Fio=(deltafo-deltao*(fo+f))/((fo+f)**2+deltafo**2)
        Fio=(f/fo)*(part1Fio+part2Fio)

        part1Fiw=(deltafw-deltaw*(fwv-f))/((fwv-f)**2+deltafw**2)
        part2Fiw=(deltafw-deltaw*(fwv+f))/((fwv+f)**2+deltafw**2)
        Fiw=(f/fwv)*(part1Fiw+part2Fiw);

        #Dry air continuum N2Df ( N''D(f) )
        dis = 5.6*(1e-4)*(p+e)*theta**0.8;
        N2Df=f*p*theta**2*((6.14*(1e-5))/(dis*(1+(f/dis)**2))+(1.4*(1e-12)*p*theta**1.5)/(1+ 1.9*(1e-5)*f**1.5))

        N2f = sum(Fio*Sio)+sum(Fiw*Siw)+ N2Df

        gases_att = (0.1820*f*N2f);

        loss = gases_att*d

        return loss


    def get_data_oxygen(self) -> tuple:
        fo = np.array([  50.474214,   50.987745,   51.50336 ,   52.021429,   52.542418,
                         53.066934,   53.595775,   54.130025,   54.67118 ,   55.221384,
                         55.783815,   56.264774,   56.363399,   56.968211,   57.612486,
                         58.323877,   58.446588,   59.164204,   59.590983,   60.306056,
                         60.434778,   61.150562,   61.800158,   62.41122 ,   62.486253,
                         62.997984,   63.568526,   64.127775,   64.67891 ,   65.224078,
                         65.764779,   66.302096,   66.836834,   67.369601,   67.900868,
                         68.431006,   68.960312,  118.750334,  368.498246,  424.76302 ,
                         487.249273,  715.392902,  773.83949 ,  834.145546])
        a1 = np.array([  9.75000000e-01,   2.52900000e+00,   6.19300000e+00,
                         1.43200000e+01,   3.12400000e+01,   6.42900000e+01,
                         1.24600000e+02,   2.27300000e+02,   3.89700000e+02,
                         6.27100000e+02,   9.45300000e+02,   5.43400000e+02,
                         1.33180000e+03,   1.74660000e+03,   2.12010000e+03,
                         2.36370000e+03,   1.44210000e+03,   2.37990000e+03,
                         2.09070000e+03,   2.10340000e+03,   2.43800000e+03,
                         2.47950000e+03,   2.27590000e+03,   1.91540000e+03,
                         1.50300000e+03,   1.49020000e+03,   1.07800000e+03,
                         7.28700000e+02,   4.61300000e+02,   2.74000000e+02,
                         1.53000000e+02,   8.04000000e+01,   3.98000000e+01,
                         1.85600000e+01,   8.17200000e+00,   3.39700000e+00,
                         1.33400000e+00,   9.40300000e+02,   6.74000000e+01,
                         6.37700000e+02,   2.37400000e+02,   9.81000000e+01,
                         5.72300000e+02,   1.83100000e+02])
        a2 = np.array([ 9.651,  8.653,  7.709,  6.819,  5.983,  5.201,  4.474,  3.8  ,
                        3.182,  2.618,  2.109,  0.014,  1.654,  1.255,  0.91 ,  0.621,
                        0.083,  0.387,  0.207,  0.207,  0.386,  0.621,  0.91 ,  1.255,
                        0.083,  1.654,  2.108,  2.617,  3.181,  3.8  ,  4.473,  5.2  ,
                        5.982,  6.818,  7.708,  8.652,  9.65 ,  0.01 ,  0.048,  0.044,
                        0.049,  0.145,  0.141,  0.145])
        a3 = np.array([  6.69,   7.17,   7.64,   8.11,   8.58,   9.06,   9.55,   9.96,
                         10.37,  10.89,  11.34,  17.03,  11.89,  12.23,  12.62,  12.95,
                         14.91,  13.53,  14.08,  14.15,  13.39,  12.92,  12.63,  12.17,
                         15.13,  11.74,  11.34,  10.88,  10.38,   9.96,   9.55,   9.06,
                         8.58,   8.11,   7.64,   7.17,   6.69,  16.64,  16.4 ,  16.4 ,
                         16.  ,  16.  ,  16.2 ,  14.7 ])
        a4 = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
                        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
                        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
                        0.,  0.,  0.,  0.,  0.])
        a5 = np.array([ 2.566,  2.246,  1.947,  1.667,  1.388,  1.349,  2.227,  3.17 ,
                        3.558,  2.56 , -1.172,  3.525, -2.378, -3.545, -5.416, -1.932,
                        6.768, -6.561,  6.957, -6.395,  6.342,  1.014,  5.014,  3.029,
                        -4.499,  1.856,  0.658, -3.036, -3.968, -3.528, -2.548, -1.66 ,
                        -1.68 , -1.956, -2.216, -2.492, -2.773, -0.439,  0.   ,  0.   ,
                        0.   ,  0.   ,  0.   ,  0.   ])
        a6 = np.array([ 6.85 ,  6.8  ,  6.729,  6.64 ,  6.526,  6.206,  5.085,  3.75 ,
                        2.654,  2.952,  6.135, -0.978,  6.547,  6.451,  6.056,  0.436,
                        -1.273,  2.309, -0.776,  0.699, -2.825, -0.584, -6.619, -6.759,
                        0.844, -6.675, -6.139, -2.895, -2.59 , -3.68 , -5.002, -6.091,
                        -6.393, -6.475, -6.545, -6.6  , -6.65 ,  0.079,  0.   ,  0.   ,
                        0.   ,  0.   ,  0.   ,  0.   ])
        return fo,a1,a2,a3,a4,a5,a6
        
    def get_data_water_vapour(self) -> tuple:
        fwv = np.array([   22.23508 ,    67.80396 ,   119.99594 ,   183.310087,
                           321.22563 ,   325.152888,   336.227764,   380.197353,
                           390.134508,   437.346667,   439.150807,   443.018343,
                           448.001085,   470.888999,   474.689092,   488.490108,
                           503.568532,   504.482692,   547.67644 ,   552.02096 ,
                           556.935985,   620.700807,   645.766085,   658.00528 ,
                           752.033113,   841.051732,   859.965698,   899.303175,
                           902.611085,   906.205957,   916.171582,   923.112692,
                           970.315022,   987.926764,  1780.      ])
        b1 = np.array([  1.07900000e-01,   1.10000000e-03,   7.00000000e-04,
                         2.27300000e+00,   4.70000000e-02,   1.51400000e+00,
                         1.00000000e-03,   1.16700000e+01,   4.50000000e-03,
                         6.32000000e-02,   9.09800000e-01,   1.92000000e-01,
                         1.04100000e+01,   3.25400000e-01,   1.26000000e+00,
                         2.52900000e-01,   3.72000000e-02,   1.24000000e-02,
                         9.78500000e-01,   1.84000000e-01,   4.97000000e+02,
                         5.01500000e+00,   6.70000000e-03,   2.73200000e-01,
                         2.43400000e+02,   1.34000000e-02,   1.32500000e-01,
                         5.47000000e-02,   3.86000000e-02,   1.83600000e-01,
                         8.40000000e+00,   7.90000000e-03,   9.00900000e+00,
                         1.34600000e+02,   1.75060000e+04])
        b2 = np.array([  2.144,   8.732,   8.353,   0.668,   6.179,   1.541,   9.825,
                         1.048,   7.347,   5.048,   3.595,   5.048,   1.405,   3.597,
                         2.379,   2.852,   6.731,   6.731,   0.158,   0.158,   0.159,
                         2.391,   8.633,   7.816,   0.396,   8.177,   8.055,   7.914,
                         8.429,   5.11 ,   1.441,  10.293,   1.919,   0.257,   0.952])
        b3 = np.array([  26.38,   28.58,   29.48,   29.06,   24.04,   28.23,   26.93,
                         28.11,   21.52,   18.45,   20.07,   15.55,   25.64,   21.34,
                         23.2 ,   25.86,   16.12,   16.12,   26.  ,   26.  ,   30.86,
                         24.38,   18.  ,   32.1 ,   30.86,   15.9 ,   30.6 ,   29.85,
                         28.65,   24.08,   26.73,   29.  ,   25.5 ,   29.85,  196.3 ])
        b4 = np.array([ 0.76,  0.69,  0.7 ,  0.77,  0.67,  0.64,  0.69,  0.54,  0.63,
                        0.6 ,  0.63,  0.6 ,  0.66,  0.66,  0.65,  0.69,  0.61,  0.61,
                        0.7 ,  0.7 ,  0.69,  0.71,  0.6 ,  0.69,  0.68,  0.33,  0.68,
                        0.68,  0.7 ,  0.7 ,  0.7 ,  0.7 ,  0.64,  0.68,  2.  ])
        b5 = np.array([  5.087,   4.93 ,   4.78 ,   5.022,   4.398,   4.893,   4.74 ,
                         5.063,   4.81 ,   4.23 ,   4.483,   5.083,   5.028,   4.506,
                         4.804,   5.201,   3.98 ,   4.01 ,   4.5  ,   4.5  ,   4.552,
                         4.856,   4.   ,   4.14 ,   4.352,   5.76 ,   4.09 ,   4.53 ,
                         5.1  ,   4.7  ,   5.15 ,   5.   ,   4.94 ,   4.55 ,  24.15 ])
        b6 = np.array([ 1.  ,  0.82,  0.79,  0.85,  0.54,  0.74,  0.61,  0.89,  0.55,
                        0.48,  0.52,  0.5 ,  0.67,  0.65,  0.64,  0.72,  0.43,  0.45,
                        1.  ,  1.  ,  1.  ,  0.68,  0.5 ,  1.  ,  0.84,  0.45,  0.84,
                        0.9 ,  0.95,  0.53,  0.78,  0.8 ,  0.67,  0.9 ,  5.  ])
        return fwv,b1,b2,b3,b4,b5,b6